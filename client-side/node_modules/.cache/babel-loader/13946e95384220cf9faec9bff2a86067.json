{"ast":null,"code":"var _jsxFileName = \"/home/rudresh-dixit/Desktop/garbage/my-chat-app/src/components/Chat/Chat.js\";\nimport React from 'react';\nimport { useState, useEffect } from 'react'; //for lifecycle methods inside of hooks\n\nimport queryString from 'query-string'; //help us getting data from the url\n\nimport io from 'socket.io-client'; //use effect is a hook that let us use lifecycle methods in fuctional components\n\nlet socket;\n\nfunction Chat({\n  location\n}) {\n  //setting up the state\n  const [name, setName] = useState('');\n  const [group, setGroup] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]); //this is going to be an array\n\n  const ENDPOINT = 'localhost:5000';\n  useEffect(() => {\n    const {\n      name,\n      group\n    } = queryString.parse(location.search);\n    socket = io(ENDPOINT);\n    setName(name);\n    setGroup(group);\n    socket.emit('join', {\n      name,\n      group\n    }, () => {});\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    //Keep track of all messages with state.\n    socket.on('message', message => {\n      setMessages([...messages, message]); //this is setting every new message to our messages array.\n    }, [messages]); //only going to run when messages are changed\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  });\n}\n\nexport default Chat;","map":{"version":3,"sources":["/home/rudresh-dixit/Desktop/garbage/my-chat-app/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","socket","Chat","location","name","setName","group","setGroup","message","setMessage","messages","setMessages","ENDPOINT","parse","search","emit","off","on"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAA6C;;AAC7C,OAAOC,WAAP,MAAwB,cAAxB,C,CAAwC;;AACxC,OAAOC,EAAP,MAAe,kBAAf,C,CACA;;AACA,IAAIC,MAAJ;;AAEA,SAASC,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAA4B;AACxB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC,CALwB,CAKsB;;AAC9C,QAAMe,QAAQ,GAAG,gBAAjB;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM;AAAEM,MAAAA,IAAF;AAAQE,MAAAA;AAAR,QAAkBP,WAAW,CAACc,KAAZ,CAAkBV,QAAQ,CAACW,MAA3B,CAAxB;AAEAb,IAAAA,MAAM,GAAGD,EAAE,CAACY,QAAD,CAAX;AAEAP,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,QAAQ,CAACD,KAAD,CAAR;AAEAL,IAAAA,MAAM,CAACc,IAAP,CAAY,MAAZ,EAAoB;AAAEX,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAApB,EAAqC,MAAM,CAE1C,CAFD;AAIA,WAAO,MAAM;AACTL,MAAAA,MAAM,CAACc,IAAP,CAAY,YAAZ;AACAd,MAAAA,MAAM,CAACe,GAAP;AACH,KAHD;AAIH,GAhBQ,EAgBN,CAACJ,QAAD,EAAWT,QAAQ,CAACW,MAApB,CAhBM,CAAT;AAkBAhB,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAG,IAAAA,MAAM,CAACgB,EAAP,CAAU,SAAV,EAAsBT,OAAD,IAAa;AAC9BG,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcF,OAAd,CAAD,CAAX,CAD8B,CAE9B;AACH,KAHD,EAGG,CAACE,QAAD,CAHH,EAFY,CAKE;AACjB,GANQ,CAAT;AAQA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAKH;;AAED,eAAeR,IAAf","sourcesContent":["import React from 'react'\nimport { useState, useEffect } from 'react'; //for lifecycle methods inside of hooks\nimport queryString from 'query-string'; //help us getting data from the url\nimport io from 'socket.io-client';\n//use effect is a hook that let us use lifecycle methods in fuctional components\nlet socket;\n\nfunction Chat({ location }) {\n    //setting up the state\n    const [name, setName] = useState('');\n    const [group, setGroup] = useState('');\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]); //this is going to be an array\n    const ENDPOINT = 'localhost:5000';\n\n    useEffect(() => {\n        const { name, group } = queryString.parse(location.search)\n\n        socket = io(ENDPOINT);\n\n        setName(name);\n        setGroup(group);\n\n        socket.emit('join', { name, group }, () => {\n\n        });\n\n        return () => {\n            socket.emit('disconnect');\n            socket.off();\n        }\n    }, [ENDPOINT, location.search]);  \n\n    useEffect(() => {\n        //Keep track of all messages with state.\n        socket.on('message', (message) => {\n            setMessages([...messages, message]);\n            //this is setting every new message to our messages array.\n        }, [messages])//only going to run when messages are changed\n    })\n\n    return (\n        <div>\n            \n        </div>\n    )\n}\n\nexport default Chat\n"]},"metadata":{},"sourceType":"module"}