{"ast":null,"code":"var _jsxFileName = \"/home/rudresh-dixit/Desktop/garbage/my-chat-app/src/components/Chat/Chat.js\";\nimport React from 'react';\nimport { useState, useEffect } from 'react'; //for lifecycle methods inside of hooks\n\nimport queryString from 'query-string'; //help us getting data from the url\n\nimport io from 'socket.io-client';\nimport './Chat.css'; //use effect is a hook that let us use lifecycle methods in fuctional components\n\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport Messages from '../Messages/Messages';\nlet socket;\n\nfunction Chat({\n  location\n}) {\n  //setting up the state\n  const [name, setName] = useState('');\n  const [group, setGroup] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]); //this is going to be an array\n\n  const ENDPOINT = 'localhost:5000';\n  useEffect(() => {\n    const {\n      name,\n      group\n    } = queryString.parse(location.search);\n    socket = io(ENDPOINT);\n    setName(name);\n    setGroup(group);\n    socket.emit('join', {\n      name,\n      group\n    }, () => {});\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    //Keep track of all messages with state.\n    socket.on('message', message => {\n      setMessages([...messages, message]); //this is setting every new message to our messages array.\n    }, [messages]); //only going to run when messages are changed\n  }); //function for sending messages and add our jsx\n  //this event handler is simply going to be function\n\n  const sendMessage = event => {\n    event.preventDefault(); //As full browser refreshes are not good\n    //prevent the default behaviour of a keypress or a button\n\n    if (message) socket.emit('sendMessage', message, () => sendMessage('')); //when we send a message our input field clears.\n  };\n\n  console.log(message, messages);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InfoBar, {\n    group: group,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Messages, {\n    messages: messages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  })));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/home/rudresh-dixit/Desktop/garbage/my-chat-app/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","InfoBar","Input","Messages","socket","Chat","location","name","setName","group","setGroup","message","setMessage","messages","setMessages","ENDPOINT","parse","search","emit","off","on","sendMessage","event","preventDefault","console","log"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useState, useEffect } from 'react'; //for lifecycle methods inside of hooks\nimport queryString from 'query-string'; //help us getting data from the url\nimport io from 'socket.io-client';\nimport './Chat.css'; \n//use effect is a hook that let us use lifecycle methods in fuctional components\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport Messages from '../Messages/Messages';\n\n\nlet socket;\n\nfunction Chat({ location }) {\n    //setting up the state\n    const [name, setName] = useState('');\n    const [group, setGroup] = useState('');\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]); //this is going to be an array\n    const ENDPOINT = 'localhost:5000';\n\n    useEffect(() => {\n        const { name, group } = queryString.parse(location.search);\n\n        socket = io(ENDPOINT);\n\n        setName(name);\n        setGroup(group);\n\n        socket.emit('join', { name, group }, () => {\n\n        });\n\n        return () => {\n            socket.emit('disconnect');\n            socket.off();\n        }\n    }, [ENDPOINT, location.search]);  \n\n    useEffect(() => {\n        //Keep track of all messages with state.\n        socket.on('message', (message) => {\n            setMessages([...messages, message]);\n            //this is setting every new message to our messages array.\n        }, [messages])//only going to run when messages are changed\n    })\n    //function for sending messages and add our jsx\n    //this event handler is simply going to be function\n    const sendMessage = (event) => {\n        event.preventDefault(); //As full browser refreshes are not good\n        //prevent the default behaviour of a keypress or a button\n        if(message) socket.emit('sendMessage', message, () => sendMessage(''));\n        //when we send a message our input field clears.\n\n    }\n\n    console.log(message, messages);\n\n    return (\n        <div className = \"outerContainer\">\n            <div className = \"container\">\n                {/* <input value = { message }\n                 onChange = { (event) => setMessage(event.target.value) }\n                 onKeyPress = { (event) => event.key ==='Enter' ? sendMessage(event) :null } /> */}\n\n                <InfoBar group = { group } />\n               \n               <Messages messages = { messages } />\n\n                <Input message = { message } setMessage = { setMessage } sendMessage = { sendMessage } />\n\n            </div>\n        </div>\n    )\n}\n\nexport default Chat\n"]},"metadata":{},"sourceType":"module"}