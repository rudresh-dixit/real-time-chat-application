{"ast":null,"code":"var _jsxFileName = \"/home/rudresh-dixit/Desktop/garbage/my-chat-app/src/components/Chat/Chat.js\";\n// Inside this component the super important socket.io logic is going\n// to be stored.\nimport React from 'react'; // useEffect - for lifecycle methods inside of hooks.\n\nimport { useState, useEffect } from 'react'; // query-string - help us getting data from the url.\n\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport './Chat.css';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport Messages from '../Messages/Messages';\nlet socket;\n\nfunction Chat({\n  location\n}) {\n  //setting up the state\n  const [name, setName] = useState('');\n  const [group, setGroup] = useState(''); // Specify the every single message.\n\n  const [message, setMessage] = useState(''); // Array to store all messages.\n\n  const [messages, setMessages] = useState([]);\n  const ENDPOINT = 'localhost:5000'; // useEffect hook takes an arrow function as input.\n  // This useEffect hook handles connection and disconnection.\n\n  useEffect(({\n    location\n  }) => {\n    // Location actually comes from react router and it gives us\n    // a prop called location.\n    // location.search doesn't gives us a full url but only the \n    // parameters.\n    // queryString.parse provides us the object there.\n    const {\n      name,\n      group\n    } = queryString.parse(location.search); // When we are going to set our first connection, we set the socket.\n\n    socket = io(ENDPOINT);\n    setName(name);\n    setGroup(group); // Now, we can emit different events using this specific instance \n    // of socket. \n    // We pass in a string that backend is going to recognize.\n    // And then something is going to happen on the backend\n    // whenever it recognizes this emitted event. \n    // And 2nd parameter is an object. We can receive this object\n    // in the backend.\n    // Like in this case, on join we are going to do something \n    // in backend.\n    // We have access to the callback of parameter function in\n    // socket.on() on server side as a 3rd parameter in\n    // socket.emit() on client side.\n\n    socket.emit('join', {\n      name,\n      group\n    }, () => {// This function is going to be executed when callback\n      // function in socket.on() on server side is called.\n      // Great way of error handling whenever a specific event\n      // is emitted.\n    }); // This return is used for unmounting. Simply provide a\n    // function that's how use effect hook is implemented. \n\n    return () => {\n      // Happening when unmounting of the component when we\n      // are leaving the chat.\n      socket.emit('disconnect'); // This turns off the one instance of client socket. So\n      // we do not have to bother with it anymore.\n\n      socket.off();\n    }; // Only if location.search value change we need to rerender our use effect.\n    // No more unnecessary side effects will happen.\n  }, [ENDPOINT, location.search]); // This useEffect hook deals with messages.\n\n  useEffect(() => {\n    // Listens for messages.\n    // Keep track of all messages with state.\n    // Message is sending as a payload of user and text.\n    socket.on('message', message => {\n      // We can push this message to our messages array.\n      // Since we simply cannot mutate the state, we are going\n      // to spread all other messages and add one message on it.\n      setMessages([...messages, message]);\n    }); // We're only going to run it when messages array changes.\n  }, [messages]); // Function for sending messages.\n\n  const sendMessage = event => {\n    // As full browser refreshes are not good\n    // Prevent the default behaviour of a keypress or a button\n    event.preventDefault(); // When we send a message, let simply clear the message field.\n    // Acheived through the callback function.\n\n    if (message) socket.emit('sendMessage', message, () => setMessage(''));\n  };\n\n  console.log(message, messages);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InfoBar, {\n    group: group,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Messages, {\n    messages: messages,\n    name: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  })));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/home/rudresh-dixit/Desktop/garbage/my-chat-app/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","InfoBar","Input","Messages","socket","Chat","location","name","setName","group","setGroup","message","setMessage","messages","setMessages","ENDPOINT","parse","search","emit","off","on","sendMessage","event","preventDefault","console","log"],"mappings":"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","sourcesContent":["// Inside this component the super important socket.io logic is going\n// to be stored.\n\nimport React from 'react'\n\n// useEffect - for lifecycle methods inside of hooks.\nimport { useState, useEffect } from 'react'; \n\n // query-string - help us getting data from the url.\nimport queryString from 'query-string';\n\nimport io from 'socket.io-client';\nimport './Chat.css'; \n\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport Messages from '../Messages/Messages';\n\n\nlet socket;\n\nfunction Chat({ location }) {\n\n    //setting up the state\n    const [name, setName] = useState('');\n    const [group, setGroup] = useState('');\n\n    // Specify the every single message.\n    const [message, setMessage] = useState('');\n\n    // Array to store all messages.\n    const [messages, setMessages] = useState([]); \n\n    const ENDPOINT = 'localhost:5000';\n\n    // useEffect hook takes an arrow function as input.\n    // This useEffect hook handles connection and disconnection.\n    useEffect(({ location }) => {\n\n        // Location actually comes from react router and it gives us\n        // a prop called location.\n        // location.search doesn't gives us a full url but only the \n        // parameters.\n        // queryString.parse provides us the object there.\n        const { name, group } = queryString.parse(location.search);\n\n        // When we are going to set our first connection, we set the socket.\n        socket = io(ENDPOINT);\n\n        setName(name);\n        setGroup(group);\n\n        // Now, we can emit different events using this specific instance \n        // of socket. \n        \n        // We pass in a string that backend is going to recognize.\n        // And then something is going to happen on the backend\n        // whenever it recognizes this emitted event. \n\n        // And 2nd parameter is an object. We can receive this object\n        // in the backend.\n        // Like in this case, on join we are going to do something \n        // in backend.\n\n        // We have access to the callback of parameter function in\n        // socket.on() on server side as a 3rd parameter in\n        // socket.emit() on client side.\n        socket.emit('join', { name, group }, () => {\n\n            // This function is going to be executed when callback\n            // function in socket.on() on server side is called.\n\n            // Great way of error handling whenever a specific event\n            // is emitted.\n        });\n\n        // This return is used for unmounting. Simply provide a\n        // function that's how use effect hook is implemented. \n        return () => {\n\n            // Happening when unmounting of the component when we\n            // are leaving the chat.\n            socket.emit('disconnect');\n\n            // This turns off the one instance of client socket. So\n            // we do not have to bother with it anymore.\n            socket.off();\n        }\n\n        // Only if location.search value change we need to rerender our use effect.\n        // No more unnecessary side effects will happen.\n    }, [ENDPOINT, location.search]); \n\n\n\n    // This useEffect hook deals with messages.\n    useEffect(() => {\n\n        // Listens for messages.\n        // Keep track of all messages with state.\n        // Message is sending as a payload of user and text.\n        socket.on('message', (message) => {\n\n            // We can push this message to our messages array.\n            // Since we simply cannot mutate the state, we are going\n            // to spread all other messages and add one message on it.\n            setMessages([...messages, message]);\n        })\n\n        // We're only going to run it when messages array changes.\n    }, [messages])\n\n\n\n    // Function for sending messages.\n    const sendMessage = (event) => {\n\n        // As full browser refreshes are not good\n        // Prevent the default behaviour of a keypress or a button\n        event.preventDefault();\n        \n        // When we send a message, let simply clear the message field.\n        // Acheived through the callback function.\n        if(message) socket.emit('sendMessage', message, () => setMessage(''));\n    }\n\n    console.log(message, messages);\n\n    return (\n        <div className = \"outerContainer\">\n            <div className = \"container\">\n\n                {/* <input value = { message }\n                 onChange = { (event) => setMessage(event.target.value) }\n                 onKeyPress = { (event) => event.key ==='Enter' ? sendMessage(event) :null } /> */}\n\n                <InfoBar group = { group } />\n               \n                <Messages messages = { messages } name = { name } />\n\n                <Input message = { message } setMessage = { setMessage } sendMessage = { sendMessage } />\n\n            </div>\n        </div>\n    )\n}\n\nexport default Chat\n"]},"metadata":{},"sourceType":"module"}